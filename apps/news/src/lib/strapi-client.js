class StrapiClient {
    constructor() {
        this.baseURL = process.env.NEXT_PUBLIC_STRAPI_URL;
        this.token = process.env.NEXT_PUBLIC_STRAPI_TOKEN;
        console.log('üîß StrapiClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å URL:', this.baseURL);
        console.log(111111111111111111111111111);
        console.log(111111111111111111111111111);
        console.log(111111111111111111111111111);
        console.log(111111111111111111111111111);
        console.log(111111111111111111111111111);
        console.log(111111111111111111111111111);
        console.log(111111111111111111111111111);
        console.log(process.env.NEXT_PUBLIC_STRAPI_TOKEN);
        console.log(process.env.NEXT_PUBLIC_STRAPI_URL);
    }



    async fetchAPI(endpoint, options = {}) {
        const url = `${this.baseURL}${endpoint}`;
        console.log('üåê –ó–∞–ø—Ä–æ—Å –∫ Strapi:', url);

        const headers = {
            'Content-Type': 'application/json',
            ...options.headers,
        };

        if (this.token) {
            headers['Authorization'] = `Bearer ${this.token}`;
        }

        try {
            const response = await fetch(url, {
                ...options,
                headers,
                next: { revalidate: 60 }
            });

            console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status, response.statusText);

            if (!response.ok) {
                const errorText = await response.text();
                console.error('‚ùå –û—à–∏–±–∫–∞ HTTP:', response.status, errorText);

                if (response.status === 400) {
                    throw new Error(`Bad Request (400): –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∑–∞–ø—Ä–æ—Å–∞. –û—Ç–≤–µ—Ç: ${errorText}`);
                }
                throw new Error(`HTTP error ${response.status}: ${errorText}`);
            }

            const data = await response.json();
            console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Strapi, –¥–∞–Ω–Ω—ã—Ö:', data.data?.length || 0);
            return data;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Strapi:', error.message);
            throw error;
        }
    }

    // –ü–†–û–°–¢–û–ô –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –ë–ï–ó —Å–ª–æ–∂–Ω–æ–≥–æ populate
    async getNewsItemsSimple() {
        const query = new URLSearchParams({
            'populate': '*', // –ü—Ä–æ—Å—Ç–æ–π populate
            'sort': 'created:desc',
            'pagination[pageSize]': '100'
        }).toString();

        return this.fetchAPI(`/api/news-items?${query}`);
    }

    // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É—Å–ª–æ–∂–Ω—è–µ–º populate
    async getNewsItemsWithCategory() {
        const query = new URLSearchParams({
            'populate[0]': 'category',
            'populate[1]': 'image',
            'sort': 'created:desc',
            'pagination[pageSize]': '100'
        }).toString();

        return this.fetchAPI(`/api/news-items?${query}`);
    }

    // –ü–æ–ª–Ω—ã–π populate (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è Strapi v4)
    async getNewsItemsFull() {
        const query = new URLSearchParams({
            'populate[0]': 'category',
            'populate[1]': 'author',
            'populate[2]': 'tags',
            'populate[3]': 'image',
            'populate[4]': 'gallery',
            'sort': 'created:desc',
            'pagination[pageSize]': '100'
        }).toString();

        return this.fetchAPI(`/api/news-items?${query}`);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    async getCategories() {
        return this.fetchAPI('/api/categories?populate=*');
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã populate
    async testPopulate() {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ populate...');

        try {
            // 1. –ü—Ä–æ—Å—Ç–æ–π populate
            console.log('1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π populate...');
            const simple = await this.getNewsItemsSimple();
            console.log('‚úÖ –ü—Ä–æ—Å—Ç–æ–π populate —Ä–∞–±–æ—Ç–∞–µ—Ç:', simple.data?.length || 0, '–Ω–æ–≤–æ—Å—Ç–µ–π');

            // 2. –° –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            console.log('2. –¢–µ—Å—Ç–∏—Ä—É–µ–º populate —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏...');
            const withCategory = await this.getNewsItemsWithCategory();
            console.log('‚úÖ Populate —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç:', withCategory.data?.length || 0, '–Ω–æ–≤–æ—Å—Ç–µ–π');

            // 3. –ü–æ–ª–Ω—ã–π populate
            console.log('3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π populate...');
            const full = await this.getNewsItemsFull();
            console.log('‚úÖ –ü–æ–ª–Ω—ã–π populate —Ä–∞–±–æ—Ç–∞–µ—Ç:', full.data?.length || 0, '–Ω–æ–≤–æ—Å—Ç–µ–π');

            return full;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ populate:', error.message);
            throw error;
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ slug
    async getNewsBySlug(slug) {
        try {
            const response = await fetch(`${this.baseURL}/api/news-items?filters[alias][$eq]=${slug}&populate=*`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                },
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Error fetching news by slug:', error);
            throw error;
        }
    }

}

export const strapiClient = new StrapiClient();