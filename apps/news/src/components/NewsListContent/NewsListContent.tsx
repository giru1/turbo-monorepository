'use client';
import styles from "../../app/page.module.css";
import { Grid, Container, Typography, Box, Button, CircularProgress } from "@mui/material";
import News from "../../components/News/News";
import NewsFilter from "../../components/NewsFilter/NewsFilter";
import React, { useState, useEffect, useCallback, useRef } from "react";
import { useSearchParams, useRouter } from "next/navigation";
import { strapiClient } from "../../lib/strapi-client";
import { StrapiNewsItem, Category } from "@/types/news";

// –≠—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç useSearchParams
export default function NewsListContent() {
    const searchParams = useSearchParams();
    const router = useRouter();
    const observerTarget = useRef<HTMLDivElement>(null);

    const author = searchParams.get('author');
    const tag = searchParams.get('tag');
    const category = searchParams.get('category');
    const date = searchParams.get('date');

    const [news, setNews] = useState<StrapiNewsItem[]>([]);
    const [loading, setLoading] = useState(true);
    const [filteredNews, setFilteredNews] = useState<StrapiNewsItem[]>([]);
    const [displayedNews, setDisplayedNews] = useState<StrapiNewsItem[]>([]);
    const [categories, setCategories] = useState<Category[]>([]);
    const [error, setError] = useState<string | null>(null);
    const [loadingMore, setLoadingMore] = useState(false);
    const [hasMore, setHasMore] = useState(true);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    const ITEMS_PER_LOAD = 10;
    const [currentIndex, setCurrentIndex] = useState(ITEMS_PER_LOAD);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
    useEffect(() => {
        async function loadData() {
            try {
                setLoading(true);
                setError(null);
                console.log('üîÑ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Strapi...');

                const newsResponse = await strapiClient.testPopulate();
                const newsData = newsResponse.data || [];
                setNews(newsData);
                setFilteredNews(newsData);

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                const categoriesResponse = await strapiClient.getCategories();
                console.log('üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', categoriesResponse.data?.length);
                setCategories(categoriesResponse.data || []);

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
                setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error instanceof Error ? error.message : String(error)}`);
            } finally {
                setLoading(false);
            }
        }
        loadData();
    }, []);

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
    useEffect(() => {
        console.log('üéØ –ù–∞—á–∞–ª–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏. –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π:', news.length);
        console.log('üìÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', { category, tag, author, date });

        let filtered = news;

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (category) {
            filtered = filtered.filter(item => item.category?.alias === category);
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–≥—É
        if (tag) {
            filtered = filtered.filter(item => item.tags?.some(t => t.name === tag));
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∞–≤—Ç–æ—Ä—É
        if (author) {
            filtered = filtered.filter(item => item.author?.name === author);
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç–µ
        if (date) {
            const filterDate = new Date(date);
            filtered = filtered.filter(item => {
                const itemDate = new Date(item.created);
                return itemDate.toDateString() === filterDate.toDateString();
            });
            console.log('üìÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç–µ:', date, '–ù–∞–π–¥–µ–Ω–æ:', filtered.length);
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
        const startDateParam = searchParams.get('startDate');
        const endDateParam = searchParams.get('endDate');

        if (startDateParam && endDateParam) {
            const startDate = new Date(startDateParam);
            const endDate = new Date(endDateParam);

            filtered = filtered.filter(item => {
                const itemDate = new Date(item.created);
                return itemDate >= startDate && itemDate <= endDate;
            });
        }

        console.log('‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–æ–≤–æ—Å—Ç–µ–π:', filtered.length);
        setFilteredNews(filtered);

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        const initialDisplay = filtered.slice(0, ITEMS_PER_LOAD);
        setDisplayedNews(initialDisplay);
        setCurrentIndex(ITEMS_PER_LOAD);
        setHasMore(filtered.length > ITEMS_PER_LOAD);

        console.log('üìÑ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:', initialDisplay.length);
    }, [category, tag, author, date, searchParams, news]);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
    const loadMoreNews = useCallback(() => {
        if (loadingMore || !hasMore) {
            console.log('‚è≠Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞:', { loadingMore, hasMore });
            return;
        }

        console.log('üîÑ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...');
        setLoadingMore(true);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        setTimeout(() => {
            const nextIndex = currentIndex + ITEMS_PER_LOAD;
            const newNews = filteredNews.slice(currentIndex, nextIndex);

            console.log(`üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å ${currentIndex} –ø–æ ${nextIndex}:`, newNews.length);

            setDisplayedNews(prev => {
                const updated = [...prev, ...newNews];
                console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:', updated.length);
                return updated;
            });

            setCurrentIndex(nextIndex);
            setHasMore(nextIndex < filteredNews.length);
            setLoadingMore(false);

            console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
                nextIndex,
                hasMore: nextIndex < filteredNews.length,
                totalFiltered: filteredNews.length
            });
        }, 300);
    }, [currentIndex, filteredNews, hasMore, loadingMore]);

    // Observer –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    useEffect(() => {
        console.log('üëÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Intersection Observer...');

        const observer = new IntersectionObserver(
            (entries) => {
                const target = entries[0];
                console.log('üéØ Observer triggered:', {
                    isIntersecting: target.isIntersecting,
                    hasMore,
                    loadingMore
                });

                if (target.isIntersecting && hasMore && !loadingMore) {
                    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...');
                    loadMoreNews();
                }
            },
            {
                threshold: 0.1,
                rootMargin: '100px' // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—Ä–∞–Ω–µ–µ, –∫–æ–≥–¥–∞ –¥–æ –∫–æ–Ω—Ü–∞ –æ—Å—Ç–∞–ª–æ—Å—å 100px
            }
        );

        const currentTarget = observerTarget.current;
        console.log('üéØ Target element:', currentTarget);

        if (currentTarget) {
            observer.observe(currentTarget);
            console.log('‚úÖ Observer —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        } else {
            console.log('‚ùå Target element –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        return () => {
            if (currentTarget) {
                observer.unobserve(currentTarget);
                console.log('üßπ Observer –æ—á–∏—â–µ–Ω');
            }
        };
    }, [hasMore, loadingMore, loadMoreNews]);

    // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–æ–ª–ª–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    useEffect(() => {
        const handleScroll = () => {
            if (loadingMore || !hasMore) return;

            const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
            const scrollHeight = document.documentElement.scrollHeight;
            const clientHeight = document.documentElement.clientHeight;

            // –ï—Å–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 500px
            if (scrollTop + clientHeight >= scrollHeight - 500) {
                console.log('üìú –°–∫—Ä–æ–ª–ª –±–ª–∏–∑–∫–æ –∫ –∫–æ–Ω—Ü—É, –∑–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏...');
                loadMoreNews();
            }
        };

        window.addEventListener('scroll', handleScroll);
        return () => window.removeEventListener('scroll', handleScroll);
    }, [loadMoreNews, loadingMore, hasMore]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const handleFilterChange = (filters: {
        category?: string;
        tag?: string;
        author?: string;
        dateRange?: { start: Date | null; end: Date | null };
        specificDate?: string;
    }) => {
        const params = new URLSearchParams();

        if (filters.category) params.set('category', filters.category);
        if (filters.tag) params.set('tag', filters.tag);
        if (filters.author) params.set('author', filters.author);

        if (filters.specificDate) {
            params.set('date', filters.specificDate);
        }

        if (filters.dateRange?.start && filters.dateRange?.end) {
            params.set('startDate', filters.dateRange.start.toISOString());
            params.set('endDate', filters.dateRange.end.toISOString());
        }

        router.push(`?${params.toString()}`, { scroll: false });
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const getNewsImage = (item: StrapiNewsItem) => {
        const defaultImage = "https://via.placeholder.com/800x400/4f46e5/ffffff?text=–ù–µ—Ç+–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è";

        if (item.image?.url) {
            return item.image.url;
        }

        if (item.gallery && Array.isArray(item.gallery) && item.gallery.length > 0 && item.gallery[0]?.url) {
            return item.gallery[0].url;
        }

        return defaultImage;
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
    const getNewsTags = (item: StrapiNewsItem) => {
        if (!item.tags || !Array.isArray(item.tags) || item.tags.length === 0) {
            return [];
        }

        return item.tags.map(tag => tag?.name).filter(Boolean);
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–æ–≤
    const getAuthors = () => {
        const authorsMap = new Map();
        news.forEach(item => {
            if (item?.author) {
                authorsMap.set(item.author.id, item.author);
            }
        });
        return Array.from(authorsMap.values());
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const formatDate = (dateString: string) => {
        return new Date(dateString).toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'long',
            year: 'numeric'
        });
    };

    // –†—É—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    const handleManualLoad = () => {
        if (hasMore && !loadingMore) {
            loadMoreNews();
        }
    };

    if (loading) {
        return (
            <Container maxWidth="xl" sx={{ marginBottom: 4, marginTop: 4 }}>
                <Typography variant="h6">–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...</Typography>
            </Container>
        );
    }

    if (error) {
        return (
            <Container maxWidth="xl" sx={{ marginBottom: 4, marginTop: 4 }}>
                <Typography variant="h6" color="error">{error}</Typography>
                <Button variant="contained" onClick={() => window.location.reload()}>
                    –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </Button>
            </Container>
        );
    }

    return (
        <Container maxWidth="xl" sx={{ marginBottom: 4, marginTop: 4 }}>

            {(category || tag || author || date) && (
                <Box sx={{ mb: 3 }}>
                    <Typography variant="h5">
                        –§–∏–ª—å—Ç—Ä:
                        {category && ` –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}`}
                        {tag && ` –¢–µ–≥: ${tag}`}
                        {author && ` –ê–≤—Ç–æ—Ä: ${author}`}
                        {date && ` –î–∞—Ç–∞: ${formatDate(date)}`}
                    </Typography>
                </Box>
            )}

            <main className={styles.content}>
                <Grid container spacing={3}>
                    <Grid size={{ xs: 12, md: 4 }}>
                        <div className={styles.content__left}>
                            <NewsFilter
                                onFilterChange={handleFilterChange}
                                categories={categories}
                                availableTags={Array.from(new Set(news.flatMap(item => {
                                    const tags = item.tags;
                                    return tags ? tags.map(t => t.name) : [];
                                })))}
                                availableAuthors={getAuthors().map(author => author.name)}
                                currentFilters={{
                                    category: category || '',
                                    tag: tag || '',
                                    author: author || '',
                                    date: date || '',
                                }}
                            />
                        </div>
                    </Grid>
                    <Grid size={{ xs: 12, md: 8 }}>
                        <div className={styles.content__right}>
                            <Typography variant="h6" sx={{ mb: 2 }}>
                                –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {filteredNews.length}
                                {date && ` –∑–∞ ${formatDate(date)}`}
                                {displayedNews.length < filteredNews.length && ` (–ø–æ–∫–∞–∑–∞–Ω–æ: ${displayedNews.length})`}
                            </Typography>

                            {displayedNews.length > 0 ? (
                                <>
                                    <Grid container spacing={2}>
                                        {displayedNews.map((item) => {
                                            if (!item?.title) {
                                                return null;
                                            }

                                            return (
                                                <News
                                                    key={item.id}
                                                    title={item.title}
                                                    descSmall={item.introtext}
                                                    date={formatDate(item.created)}
                                                    link={`/news/${item.alias}`}
                                                    img={getNewsImage(item)}
                                                    tags={getNewsTags(item)}
                                                />
                                            );
                                        })}
                                    </Grid>

                                    {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ */}
                                    <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4, mb: 4, flexDirection: 'column', alignItems: 'center', gap: 2 }}>
                                        {loadingMore ? (
                                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                                                <CircularProgress size={24} />
                                                <Typography variant="body2">–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...</Typography>
                                            </Box>
                                        ) : hasMore ? (
                                            <>
                                                <Box
                                                    ref={observerTarget}
                                                    sx={{
                                                        padding: '20px',
                                                        textAlign: 'center',
                                                        width: '100%'
                                                    }}
                                                >
                                                    <Typography variant="body2" color="text.secondary">
                                                        –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ –≤–Ω–∏–∑ —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π
                                                    </Typography>
                                                </Box>
                                                <Button
                                                    variant="outlined"
                                                    onClick={handleManualLoad}
                                                    size="small"
                                                >
                                                    –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ
                                                </Button>
                                            </>
                                        ) : filteredNews.length > 0 ? (
                                            <Typography variant="body2" color="text.secondary">
                                                –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ({filteredNews.length})
                                            </Typography>
                                        ) : null}
                                    </Box>
                                </>
                            ) : (
                                <Box sx={{ textAlign: 'center', padding: '40px' }}>
                                    <Typography variant="h6">
                                        {news.length === 0
                                            ? '–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
                                            : date
                                                ? `–ù–æ–≤–æ—Å—Ç–∏ –∑–∞ ${formatDate(date)} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`
                                                : '–ù–æ–≤–æ—Å—Ç–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
                                        }
                                    </Typography>
                                </Box>
                            )}
                        </div>
                    </Grid>
                </Grid>
            </main>
        </Container>
    );
}