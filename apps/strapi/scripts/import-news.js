const axios = require('axios');
const fs = require('fs');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Strapi
const STRAPI_URL = 'http://localhost:1337';
const API_TOKEN = '50d5040f74c057b6d5b8ae58c53b81b43feea4736f9e557403b3a5f4554aff7053c89ce5a1f0dcd8652dbd3a86461a7ab20aca9d34bd3a2eb3ceefbabc257a10033ebc159733dff681b4b8715d2157df20a79e17fda6f86e9b33b9a2e50646643bf8d95b1c0bba90890a94960f01588cc10a26ef10e2f41d5ecf45a7b8708bbf';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
function logErrorDetails(error, context = '') {
    console.log(`üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ ${context}:`);

    if (error.response) {
        // –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        console.log(`   üì° –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
        console.log(`   üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.response.statusText}`);
        console.log(`   üîó URL: ${error.response.config?.url}`);

        if (error.response.data) {
            console.log(`   üìä –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:`, JSON.stringify(error.response.data, null, 2));
        }
    } else if (error.request) {
        // –û—à–∏–±–∫–∞ —Å–µ—Ç–∏
        console.log(`   üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞`);
        console.log(`   üîó –ó–∞–ø—Ä–æ—Å:`, error.request);
    } else {
        // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
        console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞: ${error.message}`);
    }

    if (error.config) {
        console.log(`   üìã –ú–µ—Ç–æ–¥: ${error.config.method}`);
        console.log(`   üè∑Ô∏è  –ó–∞–≥–æ–ª–æ–≤–∫–∏:`, error.config.headers);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∞
async function checkAuthorExists(authorName) {
    try {
        const response = await axios.get(
            `${STRAPI_URL}/api/authors?filters[name][$eq]=${encodeURIComponent(authorName)}`,
            {
                headers: {
                    'Authorization': `Bearer ${API_TOKEN}`
                }
            }
        );
        return response.data.data.length > 0 ? response.data.data[0].id : null;
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∞ ${authorName}:`);
        logErrorDetails(error, 'checkAuthorExists');
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async function checkCategoryExists(alias) {
    try {
        const response = await axios.get(
            `${STRAPI_URL}/api/categories?filters[alias][$eq]=${alias}`,
            {
                headers: {
                    'Authorization': `Bearer ${API_TOKEN}`
                }
            }
        );
        return response.data.data.length > 0 ? response.data.data[0].id : null;
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${alias}:`);
        logErrorDetails(error, 'checkCategoryExists');
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ HTML –≥–∞–ª–µ—Ä–µ–∏
function extractGalleryUrls(galleryHtml) {
    if (!galleryHtml) {
        console.log('‚ÑπÔ∏è  –ì–∞–ª–µ—Ä–µ—è –ø—É—Å—Ç–∞—è –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        return [];
    }

    // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ href
    const regex = /href="(\/media\/k2\/galleries\/[^"]+\.(jpg|jpeg|png|gif|webp))"/gi;

    const matches = [];
    let match;

    while ((match = regex.exec(galleryHtml)) !== null) {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π URL —Å –±–∞–∑–æ–≤—ã–º –¥–æ–º–µ–Ω–æ–º
        const fullUrl = 'https://www.orgma.ru' + match[1];
        matches.push(fullUrl);
    }

    console.log(`üîç –ò–∑–≤–ª–µ—á–µ–Ω–æ ${matches.length} —Å—Å—ã–ª–æ–∫ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏`);

    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const uniqueMatches = [...new Set(matches)];
    if (uniqueMatches.length !== matches.length) {
        console.log(`üîÑ –£–±—Ä–∞–Ω–æ ${matches.length - uniqueMatches.length} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
    }

    return uniqueMatches;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function checkImageAvailability(imageUrl) {
    try {
        const response = await axios.head(imageUrl, {
            timeout: 10000,
            validateStatus: function (status) {
                return status < 500; // –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –∫—Ä–æ–º–µ 5xx
            }
        });

        const isAvailable = response.status === 200;
        console.log(`   üìä –°—Ç–∞—Ç—É—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${imageUrl}: ${response.status} ${isAvailable ? '‚úÖ' : '‚ùå'}`);

        return {
            available: isAvailable,
            status: response.status,
            contentType: response.headers['content-type'],
            contentLength: response.headers['content-length']
        };
    } catch (error) {
        console.log(`   ‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: ${imageUrl}`);
        return {
            available: false,
            error: error.message
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Strapi
async function uploadImageToStrapi(imageUrl) {
    try {
        console.log(`üñºÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageUrl}`);

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const availability = await checkImageAvailability(imageUrl);
        if (!availability.available) {
            console.log(`   ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (—Å—Ç–∞—Ç—É—Å: ${availability.status || 'error'})`);
            return null;
        }

        // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const imageResponse = await axios.get(imageUrl, {
            responseType: 'arraybuffer',
            timeout: 30000
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const imageSize = imageResponse.data.length;
        console.log(`   üìè –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${(imageSize / 1024 / 1024).toFixed(2)} MB`);

        if (imageSize > 10 * 1024 * 1024) { // 10MB limit
            console.log(`   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è`);
        }

        // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        const FormData = require('form-data');
        const form = new FormData();

        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
        const fileName = imageUrl.split('/').pop() || 'image.jpg';
        console.log(`   üìÅ –ò–º—è —Ñ–∞–π–ª–∞: ${fileName}`);

        form.append('files', Buffer.from(imageResponse.data), {
            filename: fileName,
            contentType: imageResponse.headers['content-type'] || 'image/jpeg'
        });

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Strapi
        const uploadResponse = await axios.post(
            `${STRAPI_URL}/api/upload`,
            form,
            {
                headers: {
                    'Authorization': `Bearer ${API_TOKEN}`,
                    ...form.getHeaders()
                },
                timeout: 30000
            }
        );

        if (uploadResponse.data && uploadResponse.data.length > 0) {
            console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${uploadResponse.data[0].id}`);
            return uploadResponse.data[0].id;
        } else {
            console.log(`‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Strapi –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è`);
            return null;
        }
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${imageUrl}:`);
        logErrorDetails(error, 'uploadImageToStrapi');
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≥–∞–ª–µ—Ä–µ–∏ –≤ Strapi –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Ö ID
async function uploadGalleryImages(imageUrls) {
    const uploadedImageIds = [];

    console.log(`üì¶ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ ${imageUrls.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≥–∞–ª–µ—Ä–µ–∏`);

    for (const [index, imageUrl] of imageUrls.entries()) {
        try {
            console.log(`\nüñºÔ∏è [${index + 1}/${imageUrls.length}] –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏`);
            const imageId = await uploadImageToStrapi(imageUrl);
            if (imageId) {
                uploadedImageIds.push(imageId);
                console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${imageId}`);
            } else {
                console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: ${imageUrl}`);
            }

            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 500));

        } catch (error) {
            console.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏ ${imageUrl}:`);
            logErrorDetails(error, 'uploadGalleryImages');
        }
    }

    console.log(`üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –≥–∞–ª–µ—Ä–µ–∏: ${uploadedImageIds.length}/${imageUrls.length} —É—Å–ø–µ—à–Ω–æ`);
    return uploadedImageIds;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ—Å—Ç–∏
function validateNewsData(item, categoryId, authorId, mainImageId, galleryImageIds) {
    const errors = [];

    if (!item.title) errors.push('–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫');
    if (!item.alias) errors.push('–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç alias');
    if (!categoryId) errors.push('–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è');
    if (!authorId) errors.push('–Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ—Ä');
    if (!item.created) errors.push('–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è');

    return {
        isValid: errors.length === 0,
        errors: errors
    };
}

async function importNews() {
    const failedItems = []; // –î–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–∞—Ö

    try {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö...\n');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Strapi
        try {
            const healthCheck = await axios.get(`${STRAPI_URL}/api/categories`, {
                headers: { 'Authorization': `Bearer ${API_TOKEN}` },
                timeout: 10000
            });
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Strapi —É—Å–ø–µ—à–Ω–æ');
            console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${healthCheck.status}`);
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Strapi:');
            logErrorDetails(error, 'healthCheck');
            return;
        }

        // –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        console.log('üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö...');
        const jsonData = JSON.parse(fs.readFileSync('./data/data.json', 'utf8'));
        console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${jsonData.items.length} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ —Ñ–∞–π–ª–∞`);

        // 1. –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        console.log('\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
        const categoryMap = new Map();
        const allCategories = [jsonData.category, ...(jsonData.category.children || jsonData.category.chidlren || [])];

        for (const cat of allCategories) {
            const existingCategoryId = await checkCategoryExists(cat.alias);
            if (existingCategoryId) {
                categoryMap.set(cat.id, existingCategoryId);
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${cat.name} (ID: ${existingCategoryId})`);
                continue;
            }

            const categoryData = {
                data: {
                    name: cat.name,
                    alias: cat.alias,
                    description: cat.description || '',
                    ordering: parseInt(cat.ordering) || 0,
                }
            };

            try {
                console.log(`üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${cat.name}`);
                const response = await axios.post(
                    `${STRAPI_URL}/api/categories`,
                    categoryData,
                    {
                        headers: {
                            'Authorization': `Bearer ${API_TOKEN}`,
                            'Content-Type': 'application/json'
                        }
                    }
                );
                categoryMap.set(cat.id, response.data.data.id);
                console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞: ${cat.name} (ID: ${response.data.data.id})`);
            } catch (error) {
                console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${cat.name}:`);
                logErrorDetails(error, 'createCategory');
            }
        }

        // 2. –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ—Ä–æ–≤
        console.log('\nüë• –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–æ–≤...');
        const authorMap = new Map();
        const uniqueAuthors = new Set();

        for (const item of jsonData.items) {
            if (item.author && item.author.name) {
                uniqueAuthors.add(item.author.name);
            }
        }

        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤: ${uniqueAuthors.size}`);

        for (const authorName of uniqueAuthors) {
            const existingAuthorId = await checkAuthorExists(authorName);
            if (existingAuthorId) {
                authorMap.set(authorName, existingAuthorId);
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–≤—Ç–æ—Ä: ${authorName} (ID: ${existingAuthorId})`);
                continue;
            }

            const authorData = {
                data: {
                    name: authorName,
                }
            };

            try {
                console.log(`üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞: ${authorName}`);
                const response = await axios.post(
                    `${STRAPI_URL}/api/authors`,
                    authorData,
                    {
                        headers: {
                            'Authorization': `Bearer ${API_TOKEN}`,
                            'Content-Type': 'application/json'
                        }
                    }
                );
                authorMap.set(authorName, response.data.data.id);
                console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ—Ä: ${authorName} (ID: ${response.data.data.id})`);
            } catch (error) {
                console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∞ ${authorName}:`);
                logErrorDetails(error, 'createAuthor');
            }
        }

        // 3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –≥–∞–ª–µ—Ä–µ–µ–π
        console.log('\nüì∞ –ò–º–ø–æ—Ä—Ç –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –≥–∞–ª–µ—Ä–µ–µ–π...');
        let successCount = 0;
        let errorCount = 0;
        let skipCount = 0;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...');
        const existingNewsAliases = new Set();
        try {
            const existingNews = await axios.get(
                `${STRAPI_URL}/api/news-items?fields=alias&pagination[pageSize]=1000`,
                {
                    headers: {
                        'Authorization': `Bearer ${API_TOKEN}`
                    }
                }
            );
            existingNews.data.data.forEach(news => {
                if (news.alias) existingNewsAliases.add(news.alias);
            });
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: ${existingNewsAliases.size}`);
        } catch (error) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:');
            logErrorDetails(error, 'checkExistingNews');
        }

        for (const [index, item] of jsonData.items.entries()) {
            console.log(`\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ [${index + 1}/${jsonData.items.length}]: ${item.title} ---`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–≤–æ—Å—Ç—å —Å —Ç–∞–∫–∏–º alias
            if (existingNewsAliases.has(item.alias)) {
                console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ (–¥—É–±–ª–∏–∫–∞—Ç): ${item.title}`);
                skipCount++;
                continue;
            }

            const categoryId = categoryMap.get(item.catid);
            const authorId = authorMap.get(item.author?.name);

            if (!categoryId) {
                console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è ${item.catid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                errorCount++;
                failedItems.push({
                    title: item.title,
                    alias: item.alias,
                    error: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${item.catid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`,
                    data: { catid: item.catid, categoryMap: Array.from(categoryMap.entries()) }
                });
                continue;
            }

            if (!authorId) {
                console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞: –∞–≤—Ç–æ—Ä "${item.author?.name}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                errorCount++;
                failedItems.push({
                    title: item.title,
                    alias: item.alias,
                    error: `–ê–≤—Ç–æ—Ä "${item.author?.name}" –Ω–µ –Ω–∞–π–¥–µ–Ω`,
                    data: { author: item.author, authorMap: Array.from(authorMap.entries()) }
                });
                continue;
            }

            try {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                let mainImageId = null;
                if (item.imageLarge) {
                    const mainImageUrl = `https://www.orgma.ru${item.imageLarge}`;
                    console.log(`üì∏ –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${mainImageUrl}`);
                    mainImageId = await uploadImageToStrapi(mainImageUrl);
                } else {
                    console.log('‚ÑπÔ∏è  –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
                }

                // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏
                const galleryUrls = extractGalleryUrls(item.gallery);

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏ –≤ Strapi
                let galleryImageIds = [];
                if (galleryUrls.length > 0) {
                    galleryImageIds = await uploadGalleryImages(galleryUrls);
                }

                // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
                const validation = validateNewsData(item, categoryId, authorId, mainImageId, galleryImageIds);
                if (!validation.isValid) {
                    console.log(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${validation.errors.join(', ')}`);
                    errorCount++;
                    failedItems.push({
                        title: item.title,
                        alias: item.alias,
                        error: `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${validation.errors.join(', ')}`,
                        data: { validationErrors: validation.errors }
                    });
                    continue;
                }

                const newsData = {
                    data: {
                        title: item.title,
                        alias: item.alias,
                        introtext: item.introtext || '',
                        fulltext: item.fulltext || '',
                        created: item.created,
                        imageurl: item.imageLarge ? `https://www.orgma.ru${item.imageLarge}` : null,
                        category: categoryId,
                        author: authorId,
                        gallery: galleryImageIds
                    }
                };

                // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
                if (mainImageId) {
                    newsData.data.image = mainImageId;
                }

                console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Strapi...`);
                await axios.post(
                    `${STRAPI_URL}/api/news-items`,
                    newsData,
                    {
                        headers: {
                            'Authorization': `Bearer ${API_TOKEN}`,
                            'Content-Type': 'application/json'
                        }
                    }
                );

                const imageInfo = [];
                if (mainImageId) imageInfo.push('–æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
                if (galleryImageIds.length > 0) imageInfo.push(`–≥–∞–ª–µ—Ä–µ—è: ${galleryImageIds.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);

                console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: ${item.title} (${imageInfo.join(', ') || '–±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'})`);
                successCount++;

                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
                existingNewsAliases.add(item.alias);
            } catch (error) {
                console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ "${item.title}":`);
                logErrorDetails(error, 'createNewsItem');
                errorCount++;

                failedItems.push({
                    title: item.title,
                    alias: item.alias,
                    error: error.response?.data?.error?.message || error.message,
                    data: {
                        status: error.response?.status,
                        responseData: error.response?.data
                    }
                });
            }

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏–∑-–∑–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            await new Promise(resolve => setTimeout(resolve, 1000));
        }

        console.log('\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: ${successCount}`);
        console.log(`   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${skipCount}`);
        console.log(`   ‚ùå –û—à–∏–±–∫–∏: ${errorCount}`);
        console.log(`   üìù –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${jsonData.items.length}`);

        // –°–≤–æ–¥–∫–∞ –ø–æ –∞–≤—Ç–æ—Ä–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        console.log(`\nüìã –°–≤–æ–¥–∫–∞:`);
        console.log(`   üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoryMap.size}`);
        console.log(`   üë• –ê–≤—Ç–æ—Ä–æ–≤: ${authorMap.size}`);

        // –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö
        if (failedItems.length > 0) {
            console.log(`\nüîç –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö (${failedItems.length}):`);
            failedItems.forEach((failedItem, index) => {
                console.log(`\n   ${index + 1}. "${failedItem.title}"`);
                console.log(`      Alias: ${failedItem.alias}`);
                console.log(`      –û—à–∏–±–∫–∞: ${failedItem.error}`);
                if (failedItem.data) {
                    console.log(`      –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(failedItem.data, null, 2)}`);
                }
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
            const report = {
                timestamp: new Date().toISOString(),
                results: {
                    success: successCount,
                    skipped: skipCount,
                    errors: errorCount,
                    total: jsonData.items.length
                },
                failedItems: failedItems
            };

            fs.writeFileSync('./import-error-report.json', JSON.stringify(report, null, 2));
            console.log(`\nüìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ import-error-report.json`);
        }
    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:');
        logErrorDetails(error, 'importNews');
    }
}

// –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞
importNews();