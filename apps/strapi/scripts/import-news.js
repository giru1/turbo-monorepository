const axios = require('axios');
const fs = require('fs');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Strapi
const STRAPI_URL = 'http://localhost:1337';
const API_TOKEN = '50d5040f74c057b6d5b8ae58c53b81b43feea4736f9e557403b3a5f4554aff7053c89ce5a1f0dcd8652dbd3a86461a7ab20aca9d34bd3a2eb3ceefbabc257a10033ebc159733dff681b4b8715d2157df20a79e17fda6f86e9b33b9a2e50646643bf8d95b1c0bba90890a94960f01588cc10a26ef10e2f41d5ecf45a7b8708bbf';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∞
async function checkAuthorExists(authorName) {
    try {
        const response = await axios.get(
            `${STRAPI_URL}/api/authors?filters[name][$eq]=${encodeURIComponent(authorName)}`,
            {
                headers: {
                    'Authorization': `Bearer ${API_TOKEN}`
                }
            }
        );
        return response.data.data.length > 0 ? response.data.data[0].id : null;
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∞ ${authorName}:`, error.message);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async function checkCategoryExists(alias) {
    try {
        const response = await axios.get(
            `${STRAPI_URL}/api/categories?filters[alias][$eq]=${alias}`,
            {
                headers: {
                    'Authorization': `Bearer ${API_TOKEN}`
                }
            }
        );
        return response.data.data.length > 0 ? response.data.data[0].id : null;
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${alias}:`, error.message);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ HTML –≥–∞–ª–µ—Ä–µ–∏
function extractGalleryUrls(galleryHtml) {
    if (!galleryHtml) return [];

    // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ href
    const regex = /href="(\/media\/k2\/galleries\/[^"]+\.(jpg|jpeg|png|gif|webp))"/gi;

    const matches = [];
    let match;

    while ((match = regex.exec(galleryHtml)) !== null) {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π URL —Å –±–∞–∑–æ–≤—ã–º –¥–æ–º–µ–Ω–æ–º
        const fullUrl = 'https://www.orgma.ru' + match[1];
        matches.push(fullUrl);
    }

    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    return [...new Set(matches)];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ Strapi –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Ö ID
async function uploadGalleryImages(imageUrls) {
    const uploadedImageIds = [];

    for (const imageUrl of imageUrls) {
        try {
            console.log(`üñºÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏: ${imageUrl}`);

            // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const imageResponse = await axios.get(imageUrl, {
                responseType: 'arraybuffer',
                timeout: 30000
            });

            // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            const FormData = require('form-data');
            const form = new FormData();

            // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
            const fileName = imageUrl.split('/').pop() || 'gallery-image.jpg';

            form.append('files', Buffer.from(imageResponse.data), {
                filename: fileName,
                contentType: imageResponse.headers['content-type'] || 'image/jpeg'
            });

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Strapi
            const uploadResponse = await axios.post(
                `${STRAPI_URL}/api/upload`,
                form,
                {
                    headers: {
                        'Authorization': `Bearer ${API_TOKEN}`,
                        ...form.getHeaders()
                    },
                    timeout: 30000
                }
            );

            if (uploadResponse.data && uploadResponse.data.length > 0) {
                uploadedImageIds.push(uploadResponse.data[0].id);
                console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –≥–∞–ª–µ—Ä–µ—é: ${uploadResponse.data[0].id}`);
            }

            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 500));

        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏ ${imageUrl}:`, error.message);
        }
    }

    return uploadedImageIds;
}

async function importNews() {
    try {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö...\n');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Strapi
        try {
            await axios.get(`${STRAPI_URL}/api/categories`, {
                headers: { 'Authorization': `Bearer ${API_TOKEN}` }
            });
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Strapi —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Strapi:', error.response?.data?.error?.message || error.message);
            return;
        }

        // –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        console.log('üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö...');
        const jsonData = JSON.parse(fs.readFileSync('./data/data.json', 'utf8'));

        // 1. –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        console.log('\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
        const categoryMap = new Map();
        const allCategories = [jsonData.category, ...(jsonData.category.children || jsonData.category.chidlren || [])];

        for (const cat of allCategories) {
            const existingCategoryId = await checkCategoryExists(cat.alias);
            if (existingCategoryId) {
                categoryMap.set(cat.id, existingCategoryId);
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${cat.name} (ID: ${existingCategoryId})`);
                continue;
            }

            const categoryData = {
                data: {
                    name: cat.name,
                    alias: cat.alias,
                    description: cat.description || '',
                    ordering: parseInt(cat.ordering) || 0,
                }
            };

            try {
                console.log(`üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${cat.name}`);
                const response = await axios.post(
                    `${STRAPI_URL}/api/categories`,
                    categoryData,
                    {
                        headers: {
                            'Authorization': `Bearer ${API_TOKEN}`,
                            'Content-Type': 'application/json'
                        }
                    }
                );
                categoryMap.set(cat.id, response.data.data.id);
                console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞: ${cat.name} (ID: ${response.data.data.id})`);
            } catch (error) {
                console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${cat.name}:`, error.response?.data?.error?.message || error.message);
            }
        }

        // 2. –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º parent —Å–≤—è–∑–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        console.log('\nüîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Å–≤—è–∑–µ–π...');
        for (const cat of allCategories) {
            if (cat.parent && cat.parent !== "0" && categoryMap.has(cat.id) && categoryMap.has(cat.parent)) {
                try {
                    const updateData = {
                        data: {
                            parent: categoryMap.get(cat.parent)
                        }
                    };

                    await axios.put(
                        `${STRAPI_URL}/api/categories/${categoryMap.get(cat.id)}`,
                        updateData,
                        {
                            headers: {
                                'Authorization': `Bearer ${API_TOKEN}`,
                                'Content-Type': 'application/json'
                            }
                        }
                    );
                    console.log(`‚úÖ –°–≤—è–∑—å: ${cat.name} ‚Üí —Ä–æ–¥–∏—Ç–µ–ª—å ${cat.parent}`);
                } catch (error) {
                    console.log(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–≤—è–∑–∏ –¥–ª—è ${cat.name}:`, error.response?.data?.error?.message || error.message);
                }
            }
        }

        // 3. –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ—Ä–æ–≤
        console.log('\nüë• –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–æ–≤...');
        const authorMap = new Map();
        const uniqueAuthors = new Set();

        for (const item of jsonData.items) {
            if (item.author && item.author.name) {
                uniqueAuthors.add(item.author.name);
            }
        }

        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤: ${uniqueAuthors.size}`);

        for (const authorName of uniqueAuthors) {
            const existingAuthorId = await checkAuthorExists(authorName);
            if (existingAuthorId) {
                authorMap.set(authorName, existingAuthorId);
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–≤—Ç–æ—Ä: ${authorName} (ID: ${existingAuthorId})`);
                continue;
            }

            const authorData = {
                data: {
                    name: authorName,
                }
            };

            try {
                console.log(`üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞: ${authorName}`);
                const response = await axios.post(
                    `${STRAPI_URL}/api/authors`,
                    authorData,
                    {
                        headers: {
                            'Authorization': `Bearer ${API_TOKEN}`,
                            'Content-Type': 'application/json'
                        }
                    }
                );
                authorMap.set(authorName, response.data.data.id);
                console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ—Ä: ${authorName} (ID: ${response.data.data.id})`);
            } catch (error) {
                console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∞ ${authorName}:`, error.response?.data?.error?.message || error.message);
            }
        }

        // 4. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å –≥–∞–ª–µ—Ä–µ–µ–π
        console.log('\nüì∞ –ò–º–ø–æ—Ä—Ç –Ω–æ–≤–æ—Å—Ç–µ–π —Å –≥–∞–ª–µ—Ä–µ–µ–π...');
        let successCount = 0;
        let errorCount = 0;
        let skipCount = 0;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...');
        const existingNewsAliases = new Set();
        try {
            const existingNews = await axios.get(
                `${STRAPI_URL}/api/news-items?fields=alias&pagination[pageSize]=1000`,
                {
                    headers: {
                        'Authorization': `Bearer ${API_TOKEN}`
                    }
                }
            );
            existingNews.data.data.forEach(news => {
                if (news.alias) existingNewsAliases.add(news.alias);
            });
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: ${existingNewsAliases.size}`);
        } catch (error) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:', error.message);
        }

        for (const [index, item] of jsonData.items.entries()) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–≤–æ—Å—Ç—å —Å —Ç–∞–∫–∏–º alias
            if (existingNewsAliases.has(item.alias)) {
                console.log(`‚è≠Ô∏è [${index + 1}/${jsonData.items.length}] –ü—Ä–æ–ø—É—â–µ–Ω–∞ (–¥—É–±–ª–∏–∫–∞—Ç): ${item.title}`);
                skipCount++;
                continue;
            }

            const categoryId = categoryMap.get(item.catid);
            const authorId = authorMap.get(item.author?.name);

            if (!categoryId) {
                console.log(`‚ö†Ô∏è [${index + 1}/${jsonData.items.length}] –ü—Ä–æ–ø—É—â–µ–Ω–∞: ${item.title} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è ${item.catid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)`);
                errorCount++;
                continue;
            }

            if (!authorId) {
                console.log(`‚ö†Ô∏è [${index + 1}/${jsonData.items.length}] –ü—Ä–æ–ø—É—â–µ–Ω–∞: ${item.title} (–∞–≤—Ç–æ—Ä ${item.author?.name} –Ω–µ –Ω–∞–π–¥–µ–Ω)`);
                errorCount++;
                continue;
            }

            try {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏
                const galleryUrls = extractGalleryUrls(item.gallery);
                console.log(`üñºÔ∏è [${index + 1}] –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –≥–∞–ª–µ—Ä–µ–µ: ${galleryUrls.length}`);

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏ –≤ Strapi
                let galleryImageIds = [];
                if (galleryUrls.length > 0) {
                    galleryImageIds = await uploadGalleryImages(galleryUrls);
                    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –º–µ–¥–∏–∞—Ç–µ–∫—É: ${galleryImageIds.length}`);
                }

                const newsData = {
                    data: {
                        title: item.title,
                        alias: item.alias,
                        introtext: item.introtext || '',
                        fulltext: item.fulltext || '',
                        created: item.created,
                        imageurl: `https://www.orgma.ru${item.imageLarge}`,
                        category: categoryId,
                        author: authorId,
                        gallery: galleryImageIds // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    }
                };

                await axios.post(
                    `${STRAPI_URL}/api/news-items`,
                    newsData,
                    {
                        headers: {
                            'Authorization': `Bearer ${API_TOKEN}`,
                            'Content-Type': 'application/json'
                        }
                    }
                );
                console.log(`‚úÖ [${index + 1}/${jsonData.items.length}] ${item.title} (–≥–∞–ª–µ—Ä–µ—è: ${galleryImageIds.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)`);
                successCount++;

                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
                existingNewsAliases.add(item.alias);
            } catch (error) {
                console.log(`‚ùå [${index + 1}/${jsonData.items.length}] –û—à–∏–±–∫–∞: ${item.title} - ${error.response?.data?.error?.message || error.message}`);
                errorCount++;
            }

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏–∑-–∑–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            await new Promise(resolve => setTimeout(resolve, 1000));
        }

        console.log('\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: ${successCount}`);
        console.log(`   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${skipCount}`);
        console.log(`   ‚ùå –û—à–∏–±–∫–∏: ${errorCount}`);
        console.log(`   üìù –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${jsonData.items.length}`);

        // –°–≤–æ–¥–∫–∞ –ø–æ –∞–≤—Ç–æ—Ä–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        console.log(`\nüìã –°–≤–æ–¥–∫–∞:`);
        console.log(`   üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoryMap.size}`);
        console.log(`   üë• –ê–≤—Ç–æ—Ä–æ–≤: ${authorMap.size}`);

    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞
importNews();