const fs = require('fs');
const path = require('path');

// –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
    basePath: './src/api',
    apis: [
        {
            name: 'category',
            displayName: 'Category',
            description: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π',
            attributes: {
                name: { type: 'string', required: true },
                alias: { type: 'string', unique: true },
                description: { type: 'text' },
                ordering: { type: 'integer', default: 0 }
            }
        },
        {
            name: 'author',
            displayName: 'Author',
            description: '–ê–≤—Ç–æ—Ä—ã –Ω–æ–≤–æ—Å—Ç–µ–π',
            attributes: {
                name: { type: 'string', required: true },
                avatar: { type: 'media', multiple: false }
            }
        },
        {
            name: 'tag',
            displayName: 'Tag',
            description: '–¢–µ–≥–∏ –Ω–æ–≤–æ—Å—Ç–µ–π',
            attributes: {
                name: { type: 'string', required: true, unique: true }
            }
        },
        {
            name: 'news-item',
            displayName: 'News Item',
            description: '–ù–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–±—ã—Ç–∏—è',
            attributes: {
                title: { type: 'string', required: true },
                alias: { type: 'string', unique: true },
                introtext: { type: 'text' },
                fulltext: { type: 'richtext' },
                created: { type: 'datetime' },
                hits: { type: 'integer', default: 0 },
                featured: { type: 'boolean', default: false },

                // –ü–†–û–°–¢–´–ï –æ—Ç–Ω–æ—à–µ–Ω–∏—è –±–µ–∑ inversedBy/mappedBy
                category: {
                    type: 'relation',
                    relation: 'manyToOne',
                    target: 'api::category.category'
                },
                author: {
                    type: 'relation',
                    relation: 'manyToOne',
                    target: 'api::author.author'
                },
                tags: {
                    type: 'relation',
                    relation: 'manyToMany',
                    target: 'api::tag.tag'
                },

                // –ú–µ–¥–∏–∞
                image: { type: 'media', multiple: false },
                gallery: { type: 'media', multiple: true }
            }
        }
    ]
};

function createApiStructure() {
    console.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Strapi...');

    config.apis.forEach(api => {
        const apiPath = path.join(config.basePath, api.name);
        const contentTypePath = path.join(apiPath, 'content-types', api.name);
        const routesPath = path.join(apiPath, 'routes');

        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
        [contentTypePath, routesPath].forEach(dir => {
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
            }
        });

        // –°–æ–∑–¥–∞–µ–º schema.json
        const schema = {
            kind: 'collectionType',
            collectionName: api.name.replace('-', '_') + 's',
            info: {
                singularName: api.name,
                pluralName: api.name + 's',
                displayName: api.displayName,
                description: api.description
            },
            options: {
                draftAndPublish: api.name === 'news-item' // —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
            },
            attributes: api.attributes
        };

        fs.writeFileSync(
            path.join(contentTypePath, 'schema.json'),
            JSON.stringify(schema, null, 2)
        );

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π route
        const routeContent = `module.exports = {
  routes: [
    {
      method: 'GET',
      path: '/${api.name}s',
      handler: '${api.name}.find',
      config: {
        policies: [],
        middlewares: [],
      },
    },
    {
      method: 'GET',
      path: '/${api.name}s/:id',
      handler: '${api.name}.findOne',
      config: {
        policies: [],
        middlewares: [],
      },
    },
  ],
};`;

        fs.writeFileSync(
            path.join(routesPath, `${api.name}.js`),
            routeContent
        );

        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω API: ${api.name}`);
    });

    console.log('üéâ –í—Å–µ API —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
}

createApiStructure();